'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import type { Ktv } from '@/types';
import { allArticles } from '@/data/articles'; // for placeholder image
import { PlaceHolderImages } from '@/lib/placeholder-images';

const formSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),
  address: z.string().min(5, { message: 'Address is required.' }),
  district: z.enum(['District 1', 'District 3', 'District 5', 'District 7', 'Phu Nhuan']),
  type: z.enum(['High-end', 'Mid-range', 'Budget']),
  description: z.string().min(10, { message: 'Description is required.' }),
  priceRange: z.string().min(3, { message: 'Price range is required.' }),
  hours: z.string().min(5, { message: 'Hours are required.' }),
  contact: z.object({
    phone: z.string().min(9, { message: 'Phone number is required.' }),
  }),
});

type KtvFormValues = z.infer<typeof formSchema>;

interface KtvFormProps {
  ktv: Ktv | null;
  onSave: (data: Ktv) => void;
  onCancel: () => void;
}

const getImage = (id: string) => PlaceHolderImages.find(img => img.id === id)!;

export function KtvForm({ ktv, onSave, onCancel }: KtvFormProps) {
  const defaultValues: Partial<KtvFormValues> = {
    name: ktv?.name ?? '',
    address: ktv?.address ?? '',
    district: ktv?.district ?? 'District 1',
    type: ktv?.type ?? 'Mid-range',
    description: ktv?.description ?? '',
    priceRange: ktv?.priceRange ?? '',
    hours: ktv?.hours ?? '',
    contact: {
      phone: ktv?.contact.phone ?? '',
    },
  };

  const form = useForm<KtvFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues,
  });

  function onSubmit(data: KtvFormValues) {
    const fullKtvData: Ktv = {
      ...(ktv || {
        id: '', // id will be generated by parent
        numberOfRooms: 0,
        mapUrl: '',
        cardImage: getImage('ktv-card-1'),
        gallery: [getImage('ktv-hero-1')],
        reviews: [],
        rooms: [],
        menu: [],
        paymentMethods: [],
        contact: { phone: '' },
        services: [],
      }),
      ...data,
       contact: { // Ensure contact object is fully formed
        ...ktv?.contact,
        phone: data.contact.phone,
      },
    };
    onSave(fullKtvData);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 max-h-[70vh] overflow-y-auto p-1 pr-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input placeholder="Kingdom KTV" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="address"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Address</FormLabel>
              <FormControl>
                <Input placeholder="123 Main St" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
            <FormField
            control={form.control}
            name="district"
            render={({ field }) => (
                <FormItem>
                <FormLabel>District</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                    <SelectTrigger>
                        <SelectValue placeholder="Select a district" />
                    </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                        <SelectItem value="District 1">District 1</SelectItem>
                        <SelectItem value="District 3">District 3</SelectItem>
                        <SelectItem value="District 5">District 5</SelectItem>
                        <SelectItem value="District 7">District 7</SelectItem>
                        <SelectItem value="Phu Nhuan">Phu Nhuan</SelectItem>
                    </SelectContent>
                </Select>
                <FormMessage />
                </FormItem>
            )}
            />
            <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
                <FormItem>
                <FormLabel>Type</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                    <SelectTrigger>
                        <SelectValue placeholder="Select a type" />
                    </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                        <SelectItem value="High-end">High-end</SelectItem>
                        <SelectItem value="Mid-range">Mid-range</SelectItem>
                        <SelectItem value="Budget">Budget</SelectItem>
                    </SelectContent>
                </Select>
                <FormMessage />
                </FormItem>
            )}
            />
        </div>
        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea placeholder="A luxurious KTV experience..." {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
         <FormField
          control={form.control}
          name="priceRange"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Price Range</FormLabel>
              <FormControl>
                <Input placeholder="VND 1,000,000 - 3,000,000 / hour" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="hours"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Opening Hours</FormLabel>
              <FormControl>
                <Input placeholder="2:00 PM - 2:00 AM" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="contact.phone"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Phone</FormLabel>
              <FormControl>
                <Input placeholder="028 3840 8333" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex justify-end gap-2 pt-4">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit">Save</Button>
        </div>
      </form>
    </Form>
  );
}
